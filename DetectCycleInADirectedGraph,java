class Solution {
    
    private boolean dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] vis, boolean[] pathVis) {
        vis[node] = true;
        pathVis[node] = true;
        
        for (Integer adjNode : adj.get(node)) {
            if (!vis[adjNode]) {
                if (dfs(adjNode, adj, vis, pathVis)) return true;
            }
            if (pathVis[adjNode]) {
                return true;
            }
        }
        
        pathVis[node] = false;
        return false;
    }
    
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        
        boolean[] vis = new boolean[V];
        boolean[] pathVis = new boolean[V];
        
        for (int i = 0; i < V; i++) {
            if(dfs(i, adj, vis, pathVis)) {
                return true;
            }
        }
        
        return false;
    }
}
